(ql:quickload :usocket)
(ql:quickload :flexi-streams)
(ql:quickload :cl-store)
(load "virtual-agent.lisp")



(defun tcp-server ()
  (let ((server (usocket:socket-connect "192.168.150.1" 3030)))
    (loop
       ;;Listen for incomming conns
       ; Spin off a new thread when you do this.....
       (let ((socket (usocket:socket-stream (usocket:socket-accept server))))
	 (read-line socket)))))
     
(defun tcp-client ()
  (with-client-socket (socket stream "127.0.0.1" 3030 :element-type 'Char)
    (store '(1 2 3 4) stream)
    (format t "Client sent ~a~%" '(1 2 3 4))))

(defun tcp-server-2 ()
  (let ((socket (usocket:socket-listen usocket:*wildcard-host*
				       3057
				       :reuse-address '())))
    (loop
       (format t "Waiting for input on ~A~%" socket)
       (usocket:wait-for-input socket)
       (let ((stream (usocket:socket-stream (usocket:socket-accept socket))))
	 (format t "Connection made to client ~%")
	 (handle-request stream)
	 (close stream)))))

(defun handle-request (stream)
  (let ((line (read-line stream)))
    (format t "Handling request ~%")
    (format t "You said: ~S~%" line)
    (format t "Perception: ~A~%~%" (meanings (to-syms line))))
  (terpri stream)
  (force-output stream))

(defun to-syms (inp)
  (let ((syms '()))
    (with-input-from-string (x inp)
      (do ((word (read x nil '()) (read x nil '())))
	  ((null word))
	(push word syms)))
    (reverse syms)))
